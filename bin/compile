#!/usr/bin/env bash

set -e # fail fast


indent() {
  sed -u 's/^/       /'
}


BUILD_DIR=$1
CACHE_DIR=$2
HOME_FOLDER_REPLACEMENT="__CACHE_HOME__"


echo "=====> Restoring files from cache"

for FILENAME in $(cat ${BUILD_DIR}/.buildcache | sed '/^$/d'); do
  echo -n "${FILENAME}" | indent

  if [[ ${FILENAME} = \~/* ]]; then
    WITHOUT_TILDE=$(echo ${FILENAME} | sed 's/~\///')
    SRC=${CACHE_DIR}/buildcache/${HOME_FOLDER_REPLACEMENT}/${WITHOUT_TILDE}
    DEST_DIR=~/
  else
    SRC=${CACHE_DIR}/buildcache/${FILENAME}
    DEST_DIR=${BUILD_DIR}/
  fi

  echo
  echo "SRC ${SRC}"

  if [ -e ${SRC}.tar.gz ]; then
    echo "found gzipped ${SRC}.tar.gz"
    # looks for zipped files first
    SRC="${SRC}.tar.gz"
    GZIPPED=true
  elif [ -e ${SRC} ]; then
     # file exists unzipped, just keep going
    true
  else
    # skip non-existing files
    echo " ✗ - not found"
    continue
  fi

  # delete old files
  if [ -e ${DEST_DIR}/${FILENAME} ]; then
    rm -r ${DEST_DIR}/${FILENAME}
  fi

  CACHE_SIZE=$(du -sh ${SRC}  | cut -f1)

  PARENT_DIR=$(dirname ${DEST_DIR}/${FILENAME})
  # create parent directory structure
  mkdir -p ${PARENT_DIR}

  # copy files from cache
  if [ -z $GZIPPED ]; then
    cp -r ${SRC} ${DEST_DIR}
  else
    tar x --file ${SRC} --directory ${PARENT_DIR}
    ls -al ${DEST_DIR}/*
  fi

  echo " ✓ ${CACHE_SIZE}"
done
